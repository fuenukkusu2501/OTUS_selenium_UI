{
  "uid" : "cd0e80a3cd9901f9",
  "name" : "Добавление товара в корзину",
  "fullName" : "tests.test_start#test_add_to_cart",
  "historyId" : "2987328dc021ab097458a9c10fd9e829",
  "time" : {
    "start" : 1718649031560,
    "stop" : 1718649034756,
    "duration" : 3196
  },
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (1425, -14)\n  (Session info: chrome=123.0.6312.105)\nStacktrace:\n#0 0x570522a60863 <unknown>\n#1 0x5705227568c6 <unknown>\n#2 0x5705227a8233 <unknown>\n#3 0x5705227a614e <unknown>\n#4 0x5705227a3b27 <unknown>\n#5 0x5705227a2ed3 <unknown>\n#6 0x570522796507 <unknown>\n#7 0x5705227c35a2 <unknown>\n#8 0x570522795e98 <unknown>\n#9 0x5705227c376e <unknown>\n#10 0x5705227e1c19 <unknown>\n#11 0x5705227c3343 <unknown>\n#12 0x570522794593 <unknown>\n#13 0x570522794f5e <unknown>\n#14 0x570522a2484b <unknown>\n#15 0x570522a287a5 <unknown>\n#16 0x570522a12571 <unknown>\n#17 0x570522a29332 <unknown>\n#18 0x5705229f787f <unknown>\n#19 0x570522a4f728 <unknown>\n#20 0x570522a4f8fb <unknown>\n#21 0x570522a5f9b4 <unknown>\n#22 0x72bb8e094ac3 <unknown>",
  "statusTrace" : "browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"a3390369bf13aa181b2de29c9340fd0d\")>, base_url = 'http://10.0.2.15:8081'\n\n    @allure.title(\"Добавление товара в корзину\")\n    def test_add_to_cart(browser, base_url):\n        home_page = HomePage(browser)\n        home_page.open(base_url)\n        home_page.scroll_down()\n        home_page.add_product_to_cart()\n        product_name_listing = home_page.get_product_name_listing()\n        home_page.scroll_up()\n>       home_page.click_cart_button()\n\ntests/test_start.py:60: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npage_objects/home_page.py:41: in click_cart_button\n    self.get_element(self.HOMEPAGE_CART_BUTTON).click()\n../../../.local/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.local/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:394: in _execute\n    return self._parent.execute(command, params)\n../../../.local/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7d4f361344c0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x570522a4f8fb \\\\u003Cunknown>\\\\n#21 0x570522a5f9b4 \\\\u003Cunknown>\\\\n#22 0x72bb8e094ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (1425, -14)\nE         (Session info: chrome=123.0.6312.105)\nE       Stacktrace:\nE       #0 0x570522a60863 <unknown>\nE       #1 0x5705227568c6 <unknown>\nE       #2 0x5705227a8233 <unknown>\nE       #3 0x5705227a614e <unknown>\nE       #4 0x5705227a3b27 <unknown>\nE       #5 0x5705227a2ed3 <unknown>\nE       #6 0x570522796507 <unknown>\nE       #7 0x5705227c35a2 <unknown>\nE       #8 0x570522795e98 <unknown>\nE       #9 0x5705227c376e <unknown>\nE       #10 0x5705227e1c19 <unknown>\nE       #11 0x5705227c3343 <unknown>\nE       #12 0x570522794593 <unknown>\nE       #13 0x570522794f5e <unknown>\nE       #14 0x570522a2484b <unknown>\nE       #15 0x570522a287a5 <unknown>\nE       #16 0x570522a12571 <unknown>\nE       #17 0x570522a29332 <unknown>\nE       #18 0x5705229f787f <unknown>\nE       #19 0x570522a4f728 <unknown>\nE       #20 0x570522a4f8fb <unknown>\nE       #21 0x570522a5f9b4 <unknown>\nE       #22 0x72bb8e094ac3 <unknown>\n\n../../../.local/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "base_url",
    "time" : {
      "start" : 1718649031559,
      "stop" : 1718649031559,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "browser",
    "time" : {
      "start" : 1718649027848,
      "stop" : 1718649031559,
      "duration" : 3711
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "f416884200699e62",
      "name" : "a3390369bf13aa181b2de29c9340fd0d",
      "source" : "f416884200699e62.json",
      "type" : "application/json",
      "size" : 965
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (1425, -14)\n  (Session info: chrome=123.0.6312.105)\nStacktrace:\n#0 0x570522a60863 <unknown>\n#1 0x5705227568c6 <unknown>\n#2 0x5705227a8233 <unknown>\n#3 0x5705227a614e <unknown>\n#4 0x5705227a3b27 <unknown>\n#5 0x5705227a2ed3 <unknown>\n#6 0x570522796507 <unknown>\n#7 0x5705227c35a2 <unknown>\n#8 0x570522795e98 <unknown>\n#9 0x5705227c376e <unknown>\n#10 0x5705227e1c19 <unknown>\n#11 0x5705227c3343 <unknown>\n#12 0x570522794593 <unknown>\n#13 0x570522794f5e <unknown>\n#14 0x570522a2484b <unknown>\n#15 0x570522a287a5 <unknown>\n#16 0x570522a12571 <unknown>\n#17 0x570522a29332 <unknown>\n#18 0x5705229f787f <unknown>\n#19 0x570522a4f728 <unknown>\n#20 0x570522a4f8fb <unknown>\n#21 0x570522a5f9b4 <unknown>\n#22 0x72bb8e094ac3 <unknown>",
    "statusTrace" : "browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"a3390369bf13aa181b2de29c9340fd0d\")>, base_url = 'http://10.0.2.15:8081'\n\n    @allure.title(\"Добавление товара в корзину\")\n    def test_add_to_cart(browser, base_url):\n        home_page = HomePage(browser)\n        home_page.open(base_url)\n        home_page.scroll_down()\n        home_page.add_product_to_cart()\n        product_name_listing = home_page.get_product_name_listing()\n        home_page.scroll_up()\n>       home_page.click_cart_button()\n\ntests/test_start.py:60: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npage_objects/home_page.py:41: in click_cart_button\n    self.get_element(self.HOMEPAGE_CART_BUTTON).click()\n../../../.local/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.local/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:394: in _execute\n    return self._parent.execute(command, params)\n../../../.local/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7d4f361344c0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x570522a4f8fb \\\\u003Cunknown>\\\\n#21 0x570522a5f9b4 \\\\u003Cunknown>\\\\n#22 0x72bb8e094ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (1425, -14)\nE         (Session info: chrome=123.0.6312.105)\nE       Stacktrace:\nE       #0 0x570522a60863 <unknown>\nE       #1 0x5705227568c6 <unknown>\nE       #2 0x5705227a8233 <unknown>\nE       #3 0x5705227a614e <unknown>\nE       #4 0x5705227a3b27 <unknown>\nE       #5 0x5705227a2ed3 <unknown>\nE       #6 0x570522796507 <unknown>\nE       #7 0x5705227c35a2 <unknown>\nE       #8 0x570522795e98 <unknown>\nE       #9 0x5705227c376e <unknown>\nE       #10 0x5705227e1c19 <unknown>\nE       #11 0x5705227c3343 <unknown>\nE       #12 0x570522794593 <unknown>\nE       #13 0x570522794f5e <unknown>\nE       #14 0x570522a2484b <unknown>\nE       #15 0x570522a287a5 <unknown>\nE       #16 0x570522a12571 <unknown>\nE       #17 0x570522a29332 <unknown>\nE       #18 0x5705229f787f <unknown>\nE       #19 0x570522a4f728 <unknown>\nE       #20 0x570522a4f8fb <unknown>\nE       #21 0x570522a5f9b4 <unknown>\nE       #22 0x72bb8e094ac3 <unknown>\n\n../../../.local/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException",
    "steps" : [ {
      "name" : "Открываю http://10.0.2.15:8081",
      "time" : {
        "start" : 1718649031560,
        "stop" : 1718649032572,
        "duration" : 1012
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Скроллю страницу вниз",
      "time" : {
        "start" : 1718649032573,
        "stop" : 1718649032600,
        "duration" : 27
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Добавляю товар в корзину",
      "time" : {
        "start" : 1718649032601,
        "stop" : 1718649033142,
        "duration" : 541
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Получаю название товара в листинге",
      "time" : {
        "start" : 1718649033142,
        "stop" : 1718649033324,
        "duration" : 182
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Скроллю страницу вверх",
      "time" : {
        "start" : 1718649033324,
        "stop" : 1718649033331,
        "duration" : 7
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Нажимаю на корзину",
      "time" : {
        "start" : 1718649033331,
        "stop" : 1718649034755,
        "duration" : 1424
      },
      "status" : "broken",
      "statusMessage" : "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (1425, -14)\n  (Session info: chrome=123.0.6312.105)\nStacktrace:\n#0 0x570522a60863 <unknown>\n#1 0x5705227568c6 <unknown>\n#2 0x5705227a8233 <unknown>\n#3 0x5705227a614e <unknown>\n#4 0x5705227a3b27 <unknown>\n#5 0x5705227a2ed3 <unknown>\n#6 0x570522796507 <unknown>\n#7 0x5705227c35a2 <unknown>\n#8 0x570522795e98 <unknown>\n#9 0x5705227c376e <unknown>\n#10 0x5705227e1c19 <unknown>\n#11 0x5705227c3343 <unknown>\n#12 0x570522794593 <unknown>\n#13 0x570522794f5e <unknown>\n#14 0x570522a2484b <unknown>\n#15 0x570522a287a5 <unknown>\n#16 0x570522a12571 <unknown>\n#17 0x570522a29332 <unknown>\n#18 0x5705229f787f <unknown>\n#19 0x570522a4f728 <unknown>\n#20 0x570522a4f8fb <unknown>\n#21 0x570522a5f9b4 <unknown>\n#22 0x72bb8e094ac3 <unknown>\n\n",
      "statusTrace" : "  File \"/home/fuenukkusu2501/.local/lib/python3.10/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"/home/fuenukkusu2501/Develop/tmp/OTUS_selenium_UI/page_objects/home_page.py\", line 41, in click_cart_button\n    self.get_element(self.HOMEPAGE_CART_BUTTON).click()\n  File \"/home/fuenukkusu2501/.local/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py\", line 93, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"/home/fuenukkusu2501/.local/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py\", line 394, in _execute\n    return self._parent.execute(command, params)\n  File \"/home/fuenukkusu2501/.local/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py\", line 344, in execute\n    self.error_handler.check_response(response)\n  File \"/home/fuenukkusu2501/.local/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 6,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "browser::0",
    "time" : {
      "start" : 1718649034792,
      "stop" : 1718649035039,
      "duration" : 247
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "f21cbe138557e385",
      "name" : "failure_screenshot",
      "source" : "f21cbe138557e385.png",
      "type" : "image/png",
      "size" : 325386
    }, {
      "uid" : "34a31b722dc06e11",
      "name" : "page_source",
      "source" : "34a31b722dc06e11.html",
      "type" : "text/html",
      "size" : 31785
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 2,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  } ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "tests"
  }, {
    "name" : "suite",
    "value" : "test_start"
  }, {
    "name" : "host",
    "value" : "Ubuntu"
  }, {
    "name" : "thread",
    "value" : "75075-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_start"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "cd0e80a3cd9901f9.json",
  "parameterValues" : [ ]
}