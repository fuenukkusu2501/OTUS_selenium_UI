{"name": "Наличие элементов", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_RESET\n  (Session info: chrome=127.0.6533.88)\nStacktrace:\n#0 0x5f91805c06ba <unknown>\n#1 0x5f9180290730 <unknown>\n#2 0x5f9180288761 <unknown>\n#3 0x5f91802788f9 <unknown>\n#4 0x5f918027a684 <unknown>\n#5 0x5f9180278bc5 <unknown>\n#6 0x5f9180278426 <unknown>\n#7 0x5f918027831e <unknown>\n#8 0x5f918027664c <unknown>\n#9 0x5f91802769ca <unknown>\n#10 0x5f9180293051 <unknown>\n#11 0x5f9180321cc5 <unknown>\n#12 0x5f9180302a52 <unknown>\n#13 0x5f91803211ca <unknown>\n#14 0x5f91803027f3 <unknown>\n#15 0x5f91802d2ec9 <unknown>\n#16 0x5f91802d391e <unknown>\n#17 0x5f91805869eb <unknown>\n#18 0x5f918058a972 <unknown>\n#19 0x5f9180573e15 <unknown>\n#20 0x5f918058b502 <unknown>\n#21 0x5f9180558d2f <unknown>\n#22 0x5f91805af578 <unknown>\n#23 0x5f91805af750 <unknown>\n#24 0x5f91805bf48c <unknown>\n#25 0x75401ea88ac3 <unknown>", "trace": "browser = <selenium.webdriver.remote.webdriver.WebDriver (session=\"5ad21ddd833f38d52be302f84884de9a\")>, base_url = 'http://10.0.2.15:8081'\n\n    @allure.title(\"Наличие элементов\")\n    def test_elements(browser, base_url):\n>       browser.get(base_url)\n\ntests/test_start.py:13: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:356: in get\n    self.execute(Command.GET, {\"url\": url})\nvenv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7df8274929f0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_CONNECTION_RESET\\\\n  (S...\\\\n#23 0x5f91805af750 \\\\u003Cunknown>\\\\n#24 0x5f91805bf48c \\\\u003Cunknown>\\\\n#25 0x75401ea88ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_RESET\nE         (Session info: chrome=127.0.6533.88)\nE       Stacktrace:\nE       #0 0x5f91805c06ba <unknown>\nE       #1 0x5f9180290730 <unknown>\nE       #2 0x5f9180288761 <unknown>\nE       #3 0x5f91802788f9 <unknown>\nE       #4 0x5f918027a684 <unknown>\nE       #5 0x5f9180278bc5 <unknown>\nE       #6 0x5f9180278426 <unknown>\nE       #7 0x5f918027831e <unknown>\nE       #8 0x5f918027664c <unknown>\nE       #9 0x5f91802769ca <unknown>\nE       #10 0x5f9180293051 <unknown>\nE       #11 0x5f9180321cc5 <unknown>\nE       #12 0x5f9180302a52 <unknown>\nE       #13 0x5f91803211ca <unknown>\nE       #14 0x5f91803027f3 <unknown>\nE       #15 0x5f91802d2ec9 <unknown>\nE       #16 0x5f91802d391e <unknown>\nE       #17 0x5f91805869eb <unknown>\nE       #18 0x5f918058a972 <unknown>\nE       #19 0x5f9180573e15 <unknown>\nE       #20 0x5f918058b502 <unknown>\nE       #21 0x5f9180558d2f <unknown>\nE       #22 0x5f91805af578 <unknown>\nE       #23 0x5f91805af750 <unknown>\nE       #24 0x5f91805bf48c <unknown>\nE       #25 0x75401ea88ac3 <unknown>\n\nvenv/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: WebDriverException"}, "start": 1725180868316, "stop": 1725180873056, "uuid": "8a8ae75f-a91c-48b0-a079-d84ce6cbd296", "historyId": "1bec7b78e404943e29c95d0d988030ca", "testCaseId": "1bec7b78e404943e29c95d0d988030ca", "fullName": "tests.test_start#test_elements", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_start"}, {"name": "host", "value": "fuenukkusu2501-VirtualBox"}, {"name": "thread", "value": "58421-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_start"}]}