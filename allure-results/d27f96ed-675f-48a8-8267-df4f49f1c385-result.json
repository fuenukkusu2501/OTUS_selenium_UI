{"name": "Наличие элементов", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message:", "trace": "browser = <selenium.webdriver.remote.webdriver.WebDriver (session=\"3f0684b0ce7407d67f92c201585e0c01\")>, base_url = 'http://10.0.2.15:8081'\n\n    @allure.title(\"Наличие элементов\")\n    def test_elements(browser, base_url):\n        browser.get(base_url)\n        with allure.step(\"Проверяю наличие элементов на страницах\"):\n            assert browser.title == \"Your Store\"\n            assert browser.find_element(By.CSS_SELECTOR, \".btn.btn-light.btn-lg\")\n            assert browser.find_element(By.CSS_SELECTOR, \".form-control.form-control-lg\")\n            assert browser.find_element(By.CSS_SELECTOR, \".btn.btn-lg.btn-inverse.btn-block.dropdown-toggle\")\n            assert browser.find_element(By.CSS_SELECTOR, \"#narbar-menu\")\n            assert browser.find_element(By.CSS_SELECTOR, \".row.row-cols-1.row-cols-sm-2.row-cols-md-3.row-cols-xl-4\")\n            browser.get(f\"{base_url}/en-gb/catalog/laptop-notebook\")\n            assert browser.find_element(By.CSS_SELECTOR, \"#compare-total\")\n            assert browser.find_elements(By.CSS_SELECTOR, \".fa-solid.fa-shopping-cart\")[0]\n            assert browser.find_element(By.CSS_SELECTOR, \"#button-list\")\n            assert browser.find_element(By.CSS_SELECTOR, \"#button-grid\")\n            assert browser.find_element(By.CSS_SELECTOR, \"#input-sort\")\n            browser.get(f\"{base_url}/en-gb/product/laptop-notebook/hp-lp3065\")\n            assert browser.find_element(By.CSS_SELECTOR, \"#button-cart\")\n            assert browser.find_element(By.CSS_SELECTOR, \".price-new\")\n            assert browser.find_element(By.CSS_SELECTOR, \".nav-link.active\")\n            assert browser.find_element(By.CSS_SELECTOR, \"#input-option-225\")\n            assert browser.find_element(By.CSS_SELECTOR, \"#input-quantity\")\n            browser.get(f\"{base_url}/index.php?route=account/register\")\n            assert browser.find_element(By.CSS_SELECTOR, \".btn.btn-primary\")\n            assert browser.find_element(By.CSS_SELECTOR, \"#input-firstname\")\n            assert browser.find_element(By.CSS_SELECTOR, \"#input-lastname\")\n            assert browser.find_element(By.CSS_SELECTOR, \"#input-email\")\n            assert browser.find_element(By.CSS_SELECTOR, \"#input-newsletter\")\n>           browser.get(f\"{base_url}/administration/\")\n\ntests/test_start.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:356: in get\n    self.execute(Command.GET, {\"url\": url})\nvenv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7ae7b38e8f50>, response = {'status': [13, 'unknown error'], 'value': ''}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n>           raise exception_class(value)\nE           selenium.common.exceptions.WebDriverException: Message:\n\nvenv/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:193: WebDriverException"}, "steps": [{"name": "Проверяю наличие элементов на страницах", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: \n\n", "trace": "  File \"/home/fuenukkusu2501/PycharmProjects/OTUS_selenium_UI/tests/test_start.py\", line 40, in test_elements\n    browser.get(f\"{base_url}/administration/\")\n  File \"/home/fuenukkusu2501/PycharmProjects/OTUS_selenium_UI/venv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 356, in get\n    self.execute(Command.GET, {\"url\": url})\n  File \"/home/fuenukkusu2501/PycharmProjects/OTUS_selenium_UI/venv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 347, in execute\n    self.error_handler.check_response(response)\n  File \"/home/fuenukkusu2501/PycharmProjects/OTUS_selenium_UI/venv/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py\", line 193, in check_response\n    raise exception_class(value)\n"}, "start": 1725641257565, "stop": 1725641350059}], "start": 1725641256361, "stop": 1725641350061, "uuid": "ad008d70-a083-42b6-939f-72ac7469c38e", "historyId": "1bec7b78e404943e29c95d0d988030ca", "testCaseId": "1bec7b78e404943e29c95d0d988030ca", "fullName": "tests.test_start#test_elements", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_start"}, {"name": "host", "value": "fuenukkusu2501-VirtualBox"}, {"name": "thread", "value": "72876-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_start"}]}