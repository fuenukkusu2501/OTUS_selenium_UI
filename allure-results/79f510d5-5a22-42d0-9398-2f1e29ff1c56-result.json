{"name": "Смена валюты", "status": "broken", "statusDetails": {"message": "urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='selenoid', port=4444): Max retries exceeded with url: /wd/hub/session (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x727178c47760>: Failed to establish a new connection: [Errno -3] Temporary failure in name resolution'))", "trace": "self = <urllib3.connection.HTTPConnection object at 0x727178c47760>\n\n    def _new_conn(self):\n        \"\"\"Establish a socket connection and set nodelay settings on it.\n    \n        :return: New socket connection.\n        \"\"\"\n        extra_kw = {}\n        if self.source_address:\n            extra_kw[\"source_address\"] = self.source_address\n    \n        if self.socket_options:\n            extra_kw[\"socket_options\"] = self.socket_options\n    \n        try:\n>           conn = connection.create_connection(\n                (self._dns_host, self.port), self.timeout, **extra_kw\n            )\n\n/usr/lib/python3/dist-packages/urllib3/connection.py:169: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/lib/python3/dist-packages/urllib3/util/connection.py:73: in create_connection\n    for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhost = 'selenoid', port = 4444, family = <AddressFamily.AF_UNSPEC: 0>, type = <SocketKind.SOCK_STREAM: 1>, proto = 0, flags = 0\n\n    def getaddrinfo(host, port, family=0, type=0, proto=0, flags=0):\n        \"\"\"Resolve host and port into list of address info entries.\n    \n        Translate the host/port argument into a sequence of 5-tuples that contain\n        all the necessary arguments for creating a socket connected to that service.\n        host is a domain name, a string representation of an IPv4/v6 address or\n        None. port is a string service name such as 'http', a numeric port number or\n        None. By passing None as the value of host and port, you can pass NULL to\n        the underlying C API.\n    \n        The family, type and proto arguments can be optionally specified in order to\n        narrow the list of addresses returned. Passing zero as a value for each of\n        these arguments selects the full range of results.\n        \"\"\"\n        # We override this function since we want to translate the numeric family\n        # and socket type values to enum constants.\n        addrlist = []\n>       for res in _socket.getaddrinfo(host, port, family, type, proto, flags):\nE       socket.gaierror: [Errno -3] Temporary failure in name resolution\n\n/usr/lib/python3.10/socket.py:955: gaierror\n\nDuring handling of the above exception, another exception occurred:\n\nself = <urllib3.connectionpool.HTTPConnectionPool object at 0x727178c46920>, method = 'POST', url = '/wd/hub/session'\nbody = '{\"capabilities\": {\"firstMatch\": [{}], \"alwaysMatch\": {\"browserName\": \"chrome\", \"pageLoadStrategy\": \"normal\", \"browser...options\": {\"enableVNC\": true, \"name\": \"test_change_currency\"}, \"goog:chromeOptions\": {\"extensions\": [], \"args\": []}}}}'\nheaders = {'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json;charset=UTF-8', 'User-Agent': 'selenium/4.19.0 (python linux)'}\nretries = Retry(total=0, connect=None, read=None, redirect=None, status=None), redirect = False, assert_same_host = False\ntimeout = <object object at 0x72717b181ba0>, pool_timeout = None, release_conn = True, chunked = False, body_pos = None\nresponse_kw = {'request_url': 'http://selenoid:4444/wd/hub/session'}\nparsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/wd/hub/session', query=None, fragment=None), destination_scheme = None\nconn = None, release_this_conn = True, http_tunnel_required = False, err = None, clean_exit = False\n\n    def urlopen(\n        self,\n        method,\n        url,\n        body=None,\n        headers=None,\n        retries=None,\n        redirect=True,\n        assert_same_host=True,\n        timeout=_Default,\n        pool_timeout=None,\n        release_conn=None,\n        chunked=False,\n        body_pos=None,\n        **response_kw\n    ):\n        \"\"\"\n        Get a connection from the pool and perform an HTTP request. This is the\n        lowest level call for making a request, so you'll need to specify all\n        the raw details.\n    \n        .. note::\n    \n           More commonly, it's appropriate to use a convenience method provided\n           by :class:`.RequestMethods`, such as :meth:`request`.\n    \n        .. note::\n    \n           `release_conn` will only behave as expected if\n           `preload_content=False` because we want to make\n           `preload_content=False` the default behaviour someday soon without\n           breaking backwards compatibility.\n    \n        :param method:\n            HTTP request method (such as GET, POST, PUT, etc.)\n    \n        :param url:\n            The URL to perform the request on.\n    \n        :param body:\n            Data to send in the request body, either :class:`str`, :class:`bytes`,\n            an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n    \n        :param headers:\n            Dictionary of custom headers to send, such as User-Agent,\n            If-None-Match, etc. If None, pool headers are used. If provided,\n            these headers completely replace any pool-specific headers.\n    \n        :param retries:\n            Configure the number of retries to allow before raising a\n            :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n            Pass ``None`` to retry until you receive a response. Pass a\n            :class:`~urllib3.util.retry.Retry` object for fine-grained control\n            over different types of retries.\n            Pass an integer number to retry connection errors that many times,\n            but no other types of errors. Pass zero to never retry.\n    \n            If ``False``, then retries are disabled and any exception is raised\n            immediately. Also, instead of raising a MaxRetryError on redirects,\n            the redirect response will be returned.\n    \n        :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n        :param redirect:\n            If True, automatically handle redirects (status codes 301, 302,\n            303, 307, 308). Each redirect counts as a retry. Disabling retries\n            will disable redirect, too.\n    \n        :param assert_same_host:\n            If ``True``, will make sure that the host of the pool requests is\n            consistent else will raise HostChangedError. When ``False``, you can\n            use the pool on an HTTP proxy and request foreign hosts.\n    \n        :param timeout:\n            If specified, overrides the default timeout for this one\n            request. It may be a float (in seconds) or an instance of\n            :class:`urllib3.util.Timeout`.\n    \n        :param pool_timeout:\n            If set and the pool is set to block=True, then this method will\n            block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n            connection is available within the time period.\n    \n        :param release_conn:\n            If False, then the urlopen call will not release the connection\n            back into the pool once a response is received (but will release if\n            you read the entire contents of the response such as when\n            `preload_content=True`). This is useful if you're not preloading\n            the response's content immediately. You will need to call\n            ``r.release_conn()`` on the response ``r`` to return the connection\n            back into the pool. If None, it takes the value of\n            ``response_kw.get('preload_content', True)``.\n    \n        :param chunked:\n            If True, urllib3 will send the body using chunked transfer\n            encoding. Otherwise, urllib3 will send the body using the standard\n            content-length form. Defaults to False.\n    \n        :param int body_pos:\n            Position to seek to in file-like body in the event of a retry or\n            redirect. Typically this won't need to be set because urllib3 will\n            auto-populate the value when needed.\n    \n        :param \\\\**response_kw:\n            Additional parameters are passed to\n            :meth:`urllib3.response.HTTPResponse.from_httplib`\n        \"\"\"\n    \n        parsed_url = parse_url(url)\n        destination_scheme = parsed_url.scheme\n    \n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get(\"preload_content\", True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        # Ensure that the URL we're connecting to is properly encoded\n        if url.startswith(\"/\"):\n            url = six.ensure_str(_encode_target(url))\n        else:\n            url = six.ensure_str(parsed_url.url)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/urllib3/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        http_tunnel_required = connection_requires_http_tunnel(\n            self.proxy, self.proxy_config, destination_scheme\n        )\n    \n        # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n        # have to copy the headers dict so we can safely change it without those\n        # changes being reflected in anyone else's copy.\n        if not http_tunnel_required:\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(\n                conn, \"sock\", None\n            )\n            if is_new_proxy_conn and http_tunnel_required:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n>           httplib_response = self._make_request(\n                conn,\n                method,\n                url,\n                timeout=timeout_obj,\n                body=body,\n                headers=headers,\n                chunked=chunked,\n            )\n\n/usr/lib/python3/dist-packages/urllib3/connectionpool.py:700: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/lib/python3/dist-packages/urllib3/connectionpool.py:395: in _make_request\n    conn.request(method, url, **httplib_request_kw)\n/usr/lib/python3/dist-packages/urllib3/connection.py:234: in request\n    super(HTTPConnection, self).request(method, url, body=body, headers=headers)\n/usr/lib/python3.10/http/client.py:1283: in request\n    self._send_request(method, url, body, headers, encode_chunked)\n/usr/lib/python3.10/http/client.py:1329: in _send_request\n    self.endheaders(body, encode_chunked=encode_chunked)\n/usr/lib/python3.10/http/client.py:1278: in endheaders\n    self._send_output(message_body, encode_chunked=encode_chunked)\n/usr/lib/python3.10/http/client.py:1038: in _send_output\n    self.send(msg)\n/usr/lib/python3.10/http/client.py:976: in send\n    self.connect()\n/usr/lib/python3/dist-packages/urllib3/connection.py:200: in connect\n    conn = self._new_conn()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <urllib3.connection.HTTPConnection object at 0x727178c47760>\n\n    def _new_conn(self):\n        \"\"\"Establish a socket connection and set nodelay settings on it.\n    \n        :return: New socket connection.\n        \"\"\"\n        extra_kw = {}\n        if self.source_address:\n            extra_kw[\"source_address\"] = self.source_address\n    \n        if self.socket_options:\n            extra_kw[\"socket_options\"] = self.socket_options\n    \n        try:\n            conn = connection.create_connection(\n                (self._dns_host, self.port), self.timeout, **extra_kw\n            )\n    \n        except SocketTimeout:\n            raise ConnectTimeoutError(\n                self,\n                \"Connection to %s timed out. (connect timeout=%s)\"\n                % (self.host, self.timeout),\n            )\n    \n        except SocketError as e:\n>           raise NewConnectionError(\n                self, \"Failed to establish a new connection: %s\" % e\n            )\nE           urllib3.exceptions.NewConnectionError: <urllib3.connection.HTTPConnection object at 0x727178c47760>: Failed to establish a new connection: [Errno -3] Temporary failure in name resolution\n\n/usr/lib/python3/dist-packages/urllib3/connection.py:181: NewConnectionError\n\nDuring handling of the above exception, another exception occurred:\n\nrequest = <SubRequest 'browser' for <Function test_change_currency>>\n\n    @pytest.fixture\n    def browser(request):\n        run_type = request.config.getoption(\"--run\")\n        browser_name = request.config.getoption(\"--browser\")\n        headless_mode = request.config.getoption(\"--headless\")\n        yadriver = request.config.getoption(\"--yadriver\")\n        executor = request.config.getoption(\"--executor\")\n        vnc = request.config.getoption(\"--vnc\")\n        version = request.config.getoption(\"--bv\")\n        logs = request.config.getoption(\"--logs\")\n        video = request.config.getoption(\"--video\")\n        mobile = request.config.getoption(\"--mobile\")\n    \n        if run_type == \"local\":\n            if browser_name == \"yandex\":\n                options = ChromeOptions()\n                if headless_mode:\n                    options.add_argument(\"headless=new\")\n                options.binary_location = \"*/yandex.exe\"\n                service = ChromeService(executable_path=yadriver)\n                driver = webdriver.Chrome(service=service, options=options)\n            elif browser_name == \"chrome\":\n                options = ChromeOptions()\n                options.add_argument(\"--no-sandbox\")\n                # options.add_argument('--disable-blink-features=AutomationControlled')\n                # options.add_argument('--remote-debugging-port=9222')\n                # options.add_argument(\"--disable-dev-shm-usage\")\n                # options.add_argument(\"--disable-gpu\")\n                if headless_mode:\n                    options.add_argument(\"headless=new\")\n                driver = webdriver.Chrome(service=ChromeService(), options=options)\n            elif browser_name == \"firefox\":\n                options = FirefoxOptions()\n                if headless_mode:\n                    options.add_argument(\"--headless\")\n                driver = webdriver.Firefox(service=FFService(), options=options)\n            else:\n                raise ValueError(f\"Browser {browser_name} not supported locally\")\n    \n        else:\n    \n            executor_url = f\"http://{executor}:4444/wd/hub\"\n    \n            if browser_name == \"chrome\":\n                options = ChromeOptions()\n                # options.add_argument(\"--no-sandbox\")\n                # options.add_argument(\"--disable-dev-shm-usage\")\n                # options.add_argument(\"--disable-gpu\")\n                # options.add_argument(\"--headless\")\n                # options.add_argument(\"--remote-debugging-port=9222\")\n            elif browser_name == \"firefox\":\n                options = FirefoxOptions()\n                # options.headless = True\n            elif browser_name == \"opera\":\n                options = ChromeOptions()\n            elif browser_name == \"safari\":\n                options = SafariOptions()\n            else:\n                raise ValueError(f\"Browser {browser_name} not supported remotely\")\n    \n            caps = {\n                \"browserName\": browser_name,\n                \"browserVersion\": version,\n                \"selenoid:options\": {\n                    \"enableVNC\": vnc,\n                    \"name\": request.node.name,\n                #     \"screenResolution\": \"1280x2000\",\n                #     \"enableVideo\": video,\n                #     \"enableLog\": logs,\n                #     \"timeZone\": \"Europe/Moscow\",\n                #     \"env\": [\"LANG=ru_RU.UTF-8\", \"LANGUAGE=ru:en\", \"LC_ALL=ru_RU.UTF-8\"]\n                },\n                # \"acceptInsecureCerts\": True,\n            }\n    \n            for k, v in caps.items():\n                options.set_capability(k, v)\n    \n>           driver = webdriver.Remote(\n                command_executor=executor_url,\n                options=options\n            )\n\nconftest.py:121: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n../../../.local/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:208: in __init__\n    self.start_session(capabilities)\n../../../.local/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:292: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n../../../.local/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    response = self.command_executor.execute(driver_command, params)\n../../../.local/lib/python3.10/site-packages/selenium/webdriver/remote/remote_connection.py:302: in execute\n    return self._request(command_info[0], url, body=data)\n../../../.local/lib/python3.10/site-packages/selenium/webdriver/remote/remote_connection.py:322: in _request\n    response = self._conn.request(method, url, body=body, headers=headers)\n/usr/lib/python3/dist-packages/urllib3/request.py:78: in request\n    return self.request_encode_body(\n/usr/lib/python3/dist-packages/urllib3/request.py:170: in request_encode_body\n    return self.urlopen(method, url, **extra_kw)\n/usr/lib/python3/dist-packages/urllib3/poolmanager.py:375: in urlopen\n    response = conn.urlopen(method, u.request_uri, **kw)\n/usr/lib/python3/dist-packages/urllib3/connectionpool.py:784: in urlopen\n    return self.urlopen(\n/usr/lib/python3/dist-packages/urllib3/connectionpool.py:784: in urlopen\n    return self.urlopen(\n/usr/lib/python3/dist-packages/urllib3/connectionpool.py:784: in urlopen\n    return self.urlopen(\n/usr/lib/python3/dist-packages/urllib3/connectionpool.py:756: in urlopen\n    retries = retries.increment(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = Retry(total=0, connect=None, read=None, redirect=None, status=None), method = 'POST', url = '/wd/hub/session', response = None\nerror = NewConnectionError('<urllib3.connection.HTTPConnection object at 0x727178c47760>: Failed to establish a new connection: [Errno -3] Temporary failure in name resolution')\n_pool = <urllib3.connectionpool.HTTPConnectionPool object at 0x727178c46920>, _stacktrace = <traceback object at 0x727178be3b00>\n\n    def increment(\n        self,\n        method=None,\n        url=None,\n        response=None,\n        error=None,\n        _pool=None,\n        _stacktrace=None,\n    ):\n        \"\"\"Return a new Retry object with incremented retry counters.\n    \n        :param response: A response object, or None, if the server did not\n            return a response.\n        :type response: :class:`~urllib3.response.HTTPResponse`\n        :param Exception error: An error encountered during the request, or\n            None if the response was received successfully.\n    \n        :return: A new ``Retry`` object.\n        \"\"\"\n        if self.total is False and error:\n            # Disabled, indicate to re-raise the error.\n            raise six.reraise(type(error), error, _stacktrace)\n    \n        total = self.total\n        if total is not None:\n            total -= 1\n    \n        connect = self.connect\n        read = self.read\n        redirect = self.redirect\n        status_count = self.status\n        other = self.other\n        cause = \"unknown\"\n        status = None\n        redirect_location = None\n    \n        if error and self._is_connection_error(error):\n            # Connect retry?\n            if connect is False:\n                raise six.reraise(type(error), error, _stacktrace)\n            elif connect is not None:\n                connect -= 1\n    \n        elif error and self._is_read_error(error):\n            # Read retry?\n            if read is False or not self._is_method_retryable(method):\n                raise six.reraise(type(error), error, _stacktrace)\n            elif read is not None:\n                read -= 1\n    \n        elif error:\n            # Other retry?\n            if other is not None:\n                other -= 1\n    \n        elif response and response.get_redirect_location():\n            # Redirect retry?\n            if redirect is not None:\n                redirect -= 1\n            cause = \"too many redirects\"\n            redirect_location = response.get_redirect_location()\n            status = response.status\n    \n        else:\n            # Incrementing because of a server error like a 500 in\n            # status_forcelist and the given method is in the allowed_methods\n            cause = ResponseError.GENERIC_ERROR\n            if response and response.status:\n                if status_count is not None:\n                    status_count -= 1\n                cause = ResponseError.SPECIFIC_ERROR.format(status_code=response.status)\n                status = response.status\n    \n        history = self.history + (\n            RequestHistory(method, url, error, status, redirect_location),\n        )\n    \n        new_retry = self.new(\n            total=total,\n            connect=connect,\n            read=read,\n            redirect=redirect,\n            status=status_count,\n            other=other,\n            history=history,\n        )\n    \n        if new_retry.is_exhausted():\n>           raise MaxRetryError(_pool, url, error or ResponseError(cause))\nE           urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='selenoid', port=4444): Max retries exceeded with url: /wd/hub/session (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x727178c47760>: Failed to establish a new connection: [Errno -3] Temporary failure in name resolution'))\n\n/usr/lib/python3/dist-packages/urllib3/util/retry.py:574: MaxRetryError"}, "attachments": [{"name": "log", "source": "6b91f2e4-eb64-4b39-826b-46e357e7d717-attachment.txt", "type": "text/plain"}], "start": 1723997715520, "stop": 1723997715520, "uuid": "59524882-1fde-48f4-9fa0-14e954141bda", "historyId": "eec560047c31debe6d9187354a480974", "testCaseId": "eec560047c31debe6d9187354a480974", "fullName": "tests.test_start#test_change_currency", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_start"}, {"name": "host", "value": "Ubuntu"}, {"name": "thread", "value": "71078-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_start"}]}