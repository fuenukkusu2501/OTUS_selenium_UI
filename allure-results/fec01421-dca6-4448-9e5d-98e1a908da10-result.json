{"name": "Добавление товара в корзину", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button type=\"button\" data-bs-toggle=\"dropdown\" class=\"btn btn-lg btn-inverse btn-block dropdown-toggle\">...</button> is not clickable at point (1412, 84). Other element would receive the click: <div id=\"alert\" class=\"toast-container position-fixed top-0 end-0 p-3\">...</div>\n  (Session info: chrome=126.0.6478.182)\nStacktrace:\n#0 0x55640cc57c5a <unknown>\n#1 0x55640c93ae2c <unknown>\n#2 0x55640c98e406 <unknown>\n#3 0x55640c98c246 <unknown>\n#4 0x55640c989c27 <unknown>\n#5 0x55640c988a60 <unknown>\n#6 0x55640c97c15f <unknown>\n#7 0x55640c9aa5c2 <unknown>\n#8 0x55640c97bad9 <unknown>\n#9 0x55640c9aa78e <unknown>\n#10 0x55640c9c9303 <unknown>\n#11 0x55640c9aa363 <unknown>\n#12 0x55640c97a247 <unknown>\n#13 0x55640c97ab9e <unknown>\n#14 0x55640cc1e22b <unknown>\n#15 0x55640cc222d1 <unknown>\n#16 0x55640cc09ade <unknown>\n#17 0x55640cc22e32 <unknown>\n#18 0x55640cbee77f <unknown>\n#19 0x55640cc47618 <unknown>\n#20 0x55640cc477f0 <unknown>\n#21 0x55640cc56d8c <unknown>\n#22 0x75956d894ac3 <unknown>", "trace": "browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"ec7074b02774635a920228dcc3f2a071\")>, base_url = 'http://10.0.2.15:8081'\n\n    @allure.title(\"Добавление товара в корзину\")\n    def test_add_to_cart(browser, base_url):\n        home_page = HomePage(browser)\n        home_page.open(base_url)\n        home_page.scroll_down()\n        home_page.add_product_to_cart()\n        product_name_listing = home_page.get_product_name_listing()\n        home_page.scroll_up()\n>       home_page.click_cart_button()\n\ntests/test_start.py:67: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npage_objects/home_page.py:41: in click_cart_button\n    self.get_element(self.HOMEPAGE_CART_BUTTON).click()\n/usr/local/lib/python3.10/dist-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.10/dist-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.10/dist-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x72ee87019ff0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x55640cc477f0 \\\\u003Cunknown>\\\\n#21 0x55640cc56d8c \\\\u003Cunknown>\\\\n#22 0x75956d894ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button type=\"button\" data-bs-toggle=\"dropdown\" class=\"btn btn-lg btn-inverse btn-block dropdown-toggle\">...</button> is not clickable at point (1412, 84). Other element would receive the click: <div id=\"alert\" class=\"toast-container position-fixed top-0 end-0 p-3\">...</div>\nE         (Session info: chrome=126.0.6478.182)\nE       Stacktrace:\nE       #0 0x55640cc57c5a <unknown>\nE       #1 0x55640c93ae2c <unknown>\nE       #2 0x55640c98e406 <unknown>\nE       #3 0x55640c98c246 <unknown>\nE       #4 0x55640c989c27 <unknown>\nE       #5 0x55640c988a60 <unknown>\nE       #6 0x55640c97c15f <unknown>\nE       #7 0x55640c9aa5c2 <unknown>\nE       #8 0x55640c97bad9 <unknown>\nE       #9 0x55640c9aa78e <unknown>\nE       #10 0x55640c9c9303 <unknown>\nE       #11 0x55640c9aa363 <unknown>\nE       #12 0x55640c97a247 <unknown>\nE       #13 0x55640c97ab9e <unknown>\nE       #14 0x55640cc1e22b <unknown>\nE       #15 0x55640cc222d1 <unknown>\nE       #16 0x55640cc09ade <unknown>\nE       #17 0x55640cc22e32 <unknown>\nE       #18 0x55640cbee77f <unknown>\nE       #19 0x55640cc47618 <unknown>\nE       #20 0x55640cc477f0 <unknown>\nE       #21 0x55640cc56d8c <unknown>\nE       #22 0x75956d894ac3 <unknown>\n\n/usr/local/lib/python3.10/dist-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException"}, "steps": [{"name": "Открываю http://10.0.2.15:8081", "status": "passed", "start": 1723039140498, "stop": 1723039142140}, {"name": "Скроллю страницу вниз", "status": "passed", "start": 1723039142149, "stop": 1723039142223}, {"name": "Добавляю товар в корзину", "status": "passed", "start": 1723039142224, "stop": 1723039142669}, {"name": "Получаю название товара в листинге", "status": "passed", "start": 1723039142669, "stop": 1723039142925}, {"name": "Скроллю страницу вверх", "status": "passed", "start": 1723039142925, "stop": 1723039142935}, {"name": "Нажимаю на корзину", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button type=\"button\" data-bs-toggle=\"dropdown\" class=\"btn btn-lg btn-inverse btn-block dropdown-toggle\">...</button> is not clickable at point (1412, 84). Other element would receive the click: <div id=\"alert\" class=\"toast-container position-fixed top-0 end-0 p-3\">...</div>\n  (Session info: chrome=126.0.6478.182)\nStacktrace:\n#0 0x55640cc57c5a <unknown>\n#1 0x55640c93ae2c <unknown>\n#2 0x55640c98e406 <unknown>\n#3 0x55640c98c246 <unknown>\n#4 0x55640c989c27 <unknown>\n#5 0x55640c988a60 <unknown>\n#6 0x55640c97c15f <unknown>\n#7 0x55640c9aa5c2 <unknown>\n#8 0x55640c97bad9 <unknown>\n#9 0x55640c9aa78e <unknown>\n#10 0x55640c9c9303 <unknown>\n#11 0x55640c9aa363 <unknown>\n#12 0x55640c97a247 <unknown>\n#13 0x55640c97ab9e <unknown>\n#14 0x55640cc1e22b <unknown>\n#15 0x55640cc222d1 <unknown>\n#16 0x55640cc09ade <unknown>\n#17 0x55640cc22e32 <unknown>\n#18 0x55640cbee77f <unknown>\n#19 0x55640cc47618 <unknown>\n#20 0x55640cc477f0 <unknown>\n#21 0x55640cc56d8c <unknown>\n#22 0x75956d894ac3 <unknown>\n\n", "trace": "  File \"/usr/local/lib/python3.10/dist-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"/home/fuenukkusu2501/Develop/tmp/OTUS_selenium_UI/page_objects/home_page.py\", line 41, in click_cart_button\n    self.get_element(self.HOMEPAGE_CART_BUTTON).click()\n  File \"/usr/local/lib/python3.10/dist-packages/selenium/webdriver/remote/webelement.py\", line 94, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"/usr/local/lib/python3.10/dist-packages/selenium/webdriver/remote/webelement.py\", line 395, in _execute\n    return self._parent.execute(command, params)\n  File \"/usr/local/lib/python3.10/dist-packages/selenium/webdriver/remote/webdriver.py\", line 347, in execute\n    self.error_handler.check_response(response)\n  File \"/usr/local/lib/python3.10/dist-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1723039142936, "stop": 1723039144553}], "start": 1723039140497, "stop": 1723039144553, "uuid": "83fc5eea-d25c-4f09-8106-a8932fcaf9ad", "historyId": "2987328dc021ab097458a9c10fd9e829", "testCaseId": "2987328dc021ab097458a9c10fd9e829", "fullName": "tests.test_start#test_add_to_cart", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_start"}, {"name": "host", "value": "Ubuntu"}, {"name": "thread", "value": "328493-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_start"}]}