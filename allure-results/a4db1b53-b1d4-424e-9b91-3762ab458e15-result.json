{"name": "Наличие элементов", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=128.0.6613.119)\nStacktrace:\n#0 0x58eae048986a <unknown>\n#1 0x58eae0157e50 <unknown>\n#2 0x58eae012d68f <unknown>\n#3 0x58eae01d4abd <unknown>\n#4 0x58eae01ea279 <unknown>\n#5 0x58eae01cc233 <unknown>\n#6 0x58eae019a093 <unknown>\n#7 0x58eae019b09e <unknown>\n#8 0x58eae0450acb <unknown>\n#9 0x58eae0454a81 <unknown>\n#10 0x58eae043c695 <unknown>\n#11 0x58eae04555f2 <unknown>\n#12 0x58eae042186f <unknown>\n#13 0x58eae0478668 <unknown>\n#14 0x58eae0478832 <unknown>\n#15 0x58eae048865c <unknown>\n#16 0x708930c9ca94 <unknown>\n#17 0x708930d29c3c <unknown>", "trace": "browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"0897524ba0d3790c3d777f2c3dec2fce\")>, base_url = 'http://10.0.2.15:8081'\n\n    @allure.title(\"Наличие элементов\")\n    def test_elements(browser, base_url):\n        browser.get(base_url)\n        with allure.step(\"Проверяю наличие элементов на страницах\"):\n            assert browser.title == \"Your Store\"\n            assert browser.find_element(By.CSS_SELECTOR, \".btn.btn-light.btn-lg\")\n            assert browser.find_element(By.CSS_SELECTOR, \".form-control.form-control-lg\")\n            assert browser.find_element(By.CSS_SELECTOR, \".btn.btn-lg.btn-inverse.btn-block.dropdown-toggle\")\n            assert browser.find_element(By.CSS_SELECTOR, \"#narbar-menu\")\n            assert browser.find_element(By.CSS_SELECTOR, \".row.row-cols-1.row-cols-sm-2.row-cols-md-3.row-cols-xl-4\")\n            browser.get(f\"{base_url}/en-gb/catalog/laptop-notebook\")\n            assert browser.find_element(By.CSS_SELECTOR, \"#compare-total\")\n            assert browser.find_elements(By.CSS_SELECTOR, \".fa-solid.fa-shopping-cart\")[0]\n            assert browser.find_element(By.CSS_SELECTOR, \"#button-list\")\n            assert browser.find_element(By.CSS_SELECTOR, \"#button-grid\")\n            assert browser.find_element(By.CSS_SELECTOR, \"#input-sort\")\n            browser.get(f\"{base_url}/en-gb/product/laptop-notebook/hp-lp3065\")\n>           assert browser.find_element(By.CSS_SELECTOR, \"#button-cart\")\n\ntests/test_start.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:741: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nvenv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fa660d588f0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...\\\\n#15 0x58eae048865c \\\\u003Cunknown>\\\\n#16 0x708930c9ca94 \\\\u003Cunknown>\\\\n#17 0x708930d29c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=128.0.6613.119)\nE       Stacktrace:\nE       #0 0x58eae048986a <unknown>\nE       #1 0x58eae0157e50 <unknown>\nE       #2 0x58eae012d68f <unknown>\nE       #3 0x58eae01d4abd <unknown>\nE       #4 0x58eae01ea279 <unknown>\nE       #5 0x58eae01cc233 <unknown>\nE       #6 0x58eae019a093 <unknown>\nE       #7 0x58eae019b09e <unknown>\nE       #8 0x58eae0450acb <unknown>\nE       #9 0x58eae0454a81 <unknown>\nE       #10 0x58eae043c695 <unknown>\nE       #11 0x58eae04555f2 <unknown>\nE       #12 0x58eae042186f <unknown>\nE       #13 0x58eae0478668 <unknown>\nE       #14 0x58eae0478832 <unknown>\nE       #15 0x58eae048865c <unknown>\nE       #16 0x708930c9ca94 <unknown>\nE       #17 0x708930d29c3c <unknown>\n\nvenv/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: NoSuchWindowException"}, "steps": [{"name": "Проверяю наличие элементов на страницах", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=128.0.6613.119)\nStacktrace:\n#0 0x58eae048986a <unknown>\n#1 0x58eae0157e50 <unknown>\n#2 0x58eae012d68f <unknown>\n#3 0x58eae01d4abd <unknown>\n#4 0x58eae01ea279 <unknown>\n#5 0x58eae01cc233 <unknown>\n#6 0x58eae019a093 <unknown>\n#7 0x58eae019b09e <unknown>\n#8 0x58eae0450acb <unknown>\n#9 0x58eae0454a81 <unknown>\n#10 0x58eae043c695 <unknown>\n#11 0x58eae04555f2 <unknown>\n#12 0x58eae042186f <unknown>\n#13 0x58eae0478668 <unknown>\n#14 0x58eae0478832 <unknown>\n#15 0x58eae048865c <unknown>\n#16 0x708930c9ca94 <unknown>\n#17 0x708930d29c3c <unknown>\n\n", "trace": "  File \"/home/fuenukkusu2501/PycharmProjects/OTUS_selenium_UI/tests/test_start.py\", line 29, in test_elements\n    assert browser.find_element(By.CSS_SELECTOR, \"#button-cart\")\n  File \"/home/fuenukkusu2501/PycharmProjects/OTUS_selenium_UI/venv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 741, in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/fuenukkusu2501/PycharmProjects/OTUS_selenium_UI/venv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 347, in execute\n    self.error_handler.check_response(response)\n  File \"/home/fuenukkusu2501/PycharmProjects/OTUS_selenium_UI/venv/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1725637999222, "stop": 1725638002698}], "start": 1725637993206, "stop": 1725638002714, "uuid": "187674c3-99d6-4907-8c41-4cd5cbf28300", "historyId": "1bec7b78e404943e29c95d0d988030ca", "testCaseId": "1bec7b78e404943e29c95d0d988030ca", "fullName": "tests.test_start#test_elements", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_start"}, {"name": "host", "value": "fuenukkusu2501-VirtualBox"}, {"name": "thread", "value": "53700-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_start"}]}